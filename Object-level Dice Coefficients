import torch
import torch.nn as nn
import numpy as np
import cv2
import SimpleITK as sitk

class ObjDiceLoss(nn.Module):

    def __init__(self):
        super(ObjDiceLoss, self).__init__()

    def forward(self, S: torch.Tensor, G: torch.Tensor):

        def Dice(A, B):
            temp = A & B
            dice = 2 * torch.sum(temp, dtype=torch.float32) / (torch.sum(A, dtype=torch.float32) + torch.sum(B, dtype=torch.float32))
            return dice

        # 获取S中object列表及非0元素个数
        listLabelS = torch.unique(S)
        listLabelS = listLabelS[listLabelS != 0]
        numS = len(listLabelS)
        # 获取G中object列表及非0元素个数
        listLabelG = torch.unique(G)
        listLabelG = listLabelG[listLabelG != 0]
        numG = len(listLabelG)

        if numS == 0 & numG == 0:
            return 1
        elif numS == 0 | numG == 0:
            return 0

        # 记录omega_i*Dice(G_i,S_i)
        temp1 = 0.0
        # S中object总面积
        totalAreaS = torch.sum(S > 0, dtype=torch.float32)

        for iLabelS in range(numS):
            # Si为S中值为iLabelS的区域, boolean矩阵
            Si = S == listLabelS[iLabelS]
            # 找到G中对应区域并去除背景
            intersectlist = G[Si]
            intersectlist = intersectlist[intersectlist != 0]

            if len(intersectlist) != 0:
                indexGi = torch.argmax(torch.bincount(intersectlist))
                # Gi为gt中能与Si面积重合最大的object
                Gi = G == indexGi.item()
            else:
                Gi = torch.ones_like(G)
                Gi = Gi == 0

            omegai = torch.sum(Si, dtype=torch.float32) / totalAreaS
            temp1 = temp1 + omegai * Dice(Gi, Si)

        # 记录tilde_omega_i*Dice(tilde_G_i,tilde_S_i)
        temp2 = 0.0
        # G中object总面积
        totalAreaG = torch.sum(G > 0)

        for iLabelG in range(numG):
            # Si为S中值为iLabelS的区域, boolean矩阵
            tildeGi = G == listLabelG[iLabelG]
            # 找到G中对应区域并去除背景
            intersectlist = S[tildeGi]
            intersectlist = intersectlist[intersectlist != 0]

            if len(intersectlist) != 0:
                indextildeSi = torch.argmax(torch.bincount(intersectlist))
                tildeSi = S == indextildeSi.item()
            else:
                tildeSi = torch.ones_like(S)
                tildeSi = tildeSi == 0

            tildeOmegai = torch.sum(tildeGi, dtype=torch.float32) / totalAreaG
            temp2 = temp2 + tildeOmegai * Dice(tildeGi, tildeSi)

        objDice = (temp1 + temp2) / 2
        return objDice



if __name__ == '__main__':

    mask1 = cv2.imread('D:\StudyOverLord\Project\ObjectDice\data\\testA_1_anno.bmp', flags=0)
    mask2 = cv2.imread('D:\StudyOverLord\Project\ObjectDice\data\\testA_2_anno.bmp', flags=0)
    mask1_512 = cv2.resize(mask1, (512,512))
    mask2_512 = cv2.resize(mask2, (512,512))
    mLoss1 = ObjDiceLoss()
    print(mLoss1(torch.from_numpy(mask1_512), torch.from_numpy(mask1_512)))
    print(mLoss1(torch.from_numpy(mask1_512), torch.from_numpy(mask2_512)))


